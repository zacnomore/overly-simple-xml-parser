{"version":3,"file":"index.js","sources":["../src/parser.ts"],"sourcesContent":["import { IOptions } from \"./models\";\n\nexport function parse(xmlData: string, options?: IOptions) {\n  const traversableObj = getTraversalObj(xmlData);\n  return convertToJson(traversableObj, options);\n}\n\nexport function convertToJson(node, options: IOptions = {}) {\n  const jObj = {};\n\n  const isEmptyObject = (obj) => Object.keys(obj).length === 0;\n  //when no child node or attr is present\n  if ((!node.child || isEmptyObject(node.child)) && (!node.attrsMap || isEmptyObject(node.attrsMap))) {\n    return isExist(node.val) ? node.val : '';\n  } else {\n    //otherwise create a textnode if node has some text\n    if (isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        jObj['#text'] = node.val;\n      }\n    }\n  }\n\n  // Switch to object.asign\n  merge(jObj, node.attrsMap);\n\n  Object.keys(node.child).forEach((key, index) => {\n    if (node.child[key] && node.child[key].length > 1) {\n      jObj[key] = [];\n      for (var tag in node.child[key]) {\n        jObj[key].push(convertToJson(node.child[key][tag], options));\n      }\n    } else {\n      jObj[key] = convertToJson(node.child[key][0], options);\n    }\n  });\n\n  //add value\n  return jObj;\n}\n\n function isExist(v) {\n  return typeof v !== 'undefined';\n}\n\nfunction merge(target: {}, source) {\n  if (source) {\n    const keys = Object.keys(source); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      target[keys[i]] = source[keys[i]];\n    }\n  }\n}\n\n\nexport function getTraversalObj(xmlData: string) {\n  const options: IOptions = {\n    attrNodeName: false,\n    ignoreNameSpace: false,\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseNodeValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataTagName: false,\n    cdataPositionChar: '\\\\c',\n    // eslint-disable-next-line no-unused-vars\n    tagValueProcessor: function(a, tagName) {\n      return a;\n    },\n    // eslint-disable-next-line no-unused-vars\n    attrValueProcessor: function(a, attrName) {\n      return a;\n    }\n  };\n\n  xmlData = xmlData.replace(/(\\r\\n)|\\n/, \" \");\n  const xmlObj = new xmlNode('!xml', undefined, undefined);\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData) {\n  for(let i=0; i< xmlData.length; i++) {\n    const ch = xmlData[i];\n    if(ch === '<') {\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace) {\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(currentNode) {\n          if(currentNode.val) {\n            currentNode.val = getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          } else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0) {\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        } else{\n          i = closeIndex;\n        }\n      } else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData) {\n          currentNode.val = getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      } else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        if(separatorIndex !== -1) {\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace) {\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml') {\n            currentNode.val = getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\") { //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          } else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp) {\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        } else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode, undefined);\n          if(tagName !== tagExp) {\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    } else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction xmlNode(tagname, parent, val) {\n  this.tagname = tagname;\n  this.parent = parent;\n  this.child = {}; //child tags\n  this.attrsMap = {}; //attributes map\n  this.val = val; //text only\n  this.addChild = function(child) {\n    if (Array.isArray(this.child[child.tagname])) {\n      //already presents\n      this.child[child.tagname].push(child);\n    } else {\n      this.child[child.tagname] = [child];\n    }\n  };\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg) {\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1) {\n    throw new Error(errMsg)\n  } else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction getValue(v) {\n  if (isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}\n\nfunction processTagValue(tagName, val, options: IOptions) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue);\n  }\n\n  return val;\n}\n\n\nfunction parseValue(val, shouldParse) {\n  if (shouldParse && typeof val === 'string') {\n    let parsed;\n    if (val.trim() === '') {\n      parsed = val === 'true' ? true : val === 'false' ? false : val;\n    } else {\n      if (val.indexOf('0x') !== -1) {\n        //support hexa decimal\n        parsed = parseInt(val, 16);\n      } else if (val.indexOf('.') !== -1) {\n        parsed = parseFloat(val);\n        val = val.replace(/\\.?0+$/, \"\");\n      } else {\n        parsed = parseInt(val, 10);\n      }\n    }\n    return parsed;\n  } else {\n    if (isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nfunction closingIndexForOpeningTag(data, i) {\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\n\nfunction buildAttributesMap(attrStr, options: IOptions) {\n  if (typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n\n    const attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n    const matches = getAllMatches(attrStr, attrsRegx);\n    const len = matches.length;\n    if (len === 0) { return; }\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        const namePrefix = '@_';\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[namePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[namePrefix + attrName] = true;\n        }\n      }\n    }\n    return attrs;\n  }\n}\n\n\nfunction getAllMatches(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n}\n\nfunction resolveNameSpace(tagname, options: IOptions) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}"],"names":[],"mappings":"SAEgB,KAAK,CAAC,OAAe,EAAE,OAAkB;IACvD,IAAM,cAAc,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;IAChD,OAAO,aAAa,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AAChD,CAAC;SAEe,aAAa,CAAC,IAAI,EAAE,OAAsB;IAAtB,wBAAA,EAAA,YAAsB;IACxD,IAAM,IAAI,GAAG,EAAE,CAAC;IAEhB,IAAM,aAAa,GAAG,UAAC,GAAG,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,GAAA,CAAC;IAE7D,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE;QAClG,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;KAC1C;SAAM;QAEL,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACrB,IAAI,EAAE,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,IAAI,IAAI,CAAC,GAAG,KAAK,OAAO,CAAC,iBAAiB,CAAC,CAAC,EAAE;gBAClG,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;aAC1B;SACF;KACF;IAGD,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAE3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;QACzC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACjD,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YACf,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBAC/B,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;aAC9D;SACF;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;SACxD;KACF,CAAC,CAAC;IAGH,OAAO,IAAI,CAAC;AACd,CAAC;AAEA,SAAS,OAAO,CAAC,CAAC;IACjB,OAAO,OAAO,CAAC,KAAK,WAAW,CAAC;AAClC,CAAC;AAED,SAAS,KAAK,CAAC,MAAU,EAAE,MAAM;IAC/B,IAAI,MAAM,EAAE;QACV,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjC,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;KACF;AACH,CAAC;SAGe,eAAe,CAAC,OAAe;IAC7C,IAAM,OAAO,GAAa;QACxB,YAAY,EAAE,KAAK;QACnB,eAAe,EAAE,KAAK;QACtB,sBAAsB,EAAE,KAAK;QAE7B,cAAc,EAAE,IAAI;QACpB,mBAAmB,EAAE,KAAK;QAC1B,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,KAAK;QACnB,iBAAiB,EAAE,KAAK;QAExB,iBAAiB,EAAE,UAAS,CAAC,EAAE,OAAO;YACpC,OAAO,CAAC,CAAC;SACV;QAED,kBAAkB,EAAE,UAAS,CAAC,EAAE,QAAQ;YACtC,OAAO,CAAC,CAAC;SACV;KACF,CAAC;IAEF,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IAC5C,IAAM,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACzD,IAAI,WAAW,GAAG,MAAM,CAAC;IACzB,IAAI,QAAQ,GAAG,EAAE,CAAC;IAGlB,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAE,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,IAAM,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACtB,IAAG,EAAE,KAAK,GAAG,EAAE;YACb,IAAI,OAAO,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACxB,IAAM,UAAU,GAAG,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,4BAA4B,CAAC,CAAA;gBAClF,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,EAAC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC;gBAEvD,IAAG,OAAO,CAAC,eAAe,EAAE;oBAC1B,IAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACxC,IAAG,UAAU,KAAK,CAAC,CAAC,EAAE;wBACpB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,GAAC,CAAC,CAAC,CAAC;qBACxC;iBACF;gBAED,IAAG,WAAW,EAAE;oBACd,IAAG,WAAW,CAAC,GAAG,EAAE;wBAClB,WAAW,CAAC,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAG,OAAO,CAAC,CAAC;qBACjG;yBAAK;wBACJ,WAAW,CAAC,GAAG,GAAG,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAG,OAAO,CAAC,CAAC;qBAChE;iBACF;gBACD,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC;gBACjC,QAAQ,GAAG,EAAE,CAAC;gBACd,CAAC,GAAG,UAAU,CAAC;aAChB;iBAAM,IAAI,OAAO,CAAC,CAAC,GAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBAC/B,CAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,uBAAuB,CAAC,CAAA;aAChE;iBAAM,IAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE;gBAC5C,CAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,wBAAwB,CAAC,CAAA;aAClE;iBAAM,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;gBAC5C,IAAM,UAAU,GAAG,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,wBAAwB,CAAC,CAAA;gBAC9E,IAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;gBAChD,IAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oBAC3B,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;iBAClC;qBAAK;oBACJ,CAAC,GAAG,UAAU,CAAC;iBAChB;aACF;iBAAM,IAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;gBAC3C,IAAM,UAAU,GAAG,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,sBAAsB,CAAC,GAAG,CAAC,CAAA;gBAClF,IAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAC,UAAU,CAAC,CAAC;gBAKnD,IAAG,QAAQ,EAAE;oBACX,WAAW,CAAC,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAG,OAAO,CAAC,CAAC;oBAC5G,QAAQ,GAAG,EAAE,CAAC;iBACf;gBAED,IAAI,OAAO,CAAC,YAAY,EAAE;oBAExB,IAAM,SAAS,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;oBACzE,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;oBAEhC,WAAW,CAAC,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;oBAExE,IAAI,MAAM,EAAE;wBACV,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC;qBACxB;iBACF;qBAAM;oBACL,WAAW,CAAC,GAAG,GAAG,CAAC,WAAW,CAAC,GAAG,IAAI,EAAE,KAAK,MAAM,IAAI,EAAE,CAAC,CAAC;iBAC5D;gBAED,CAAC,GAAG,UAAU,GAAG,CAAC,CAAC;aACpB;iBAAM;gBACL,IAAM,MAAM,GAAG,yBAAyB,CAAC,OAAO,EAAE,CAAC,GAAC,CAAC,CAAC,CAAA;gBACtD,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;gBACzB,IAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC;gBAChC,IAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC3C,IAAI,OAAO,GAAG,MAAM,CAAC;gBACrB,IAAG,cAAc,KAAK,CAAC,CAAC,EAAE;oBACxB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;oBACjE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;iBAC5C;gBAED,IAAG,OAAO,CAAC,eAAe,EAAE;oBAC1B,IAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACxC,IAAG,UAAU,KAAK,CAAC,CAAC,EAAE;wBACpB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,GAAC,CAAC,CAAC,CAAC;qBACxC;iBACF;gBAGD,IAAI,WAAW,IAAI,QAAQ,EAAE;oBAC3B,IAAG,WAAW,CAAC,OAAO,KAAK,MAAM,EAAE;wBACjC,WAAW,CAAC,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,eAAe,CAAE,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;qBAC7G;iBACF;gBAED,IAAG,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;oBAErE,IAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;wBACtC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBAChD,MAAM,GAAG,OAAO,CAAC;qBAClB;yBAAK;wBACJ,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;qBAC9C;oBAED,IAAM,SAAS,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;oBACxD,IAAG,OAAO,KAAK,MAAM,EAAE;wBACrB,SAAS,CAAC,QAAQ,GAAG,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;qBAC1D;oBACD,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;iBACjC;qBAAK;oBAEJ,IAAM,SAAS,GAAG,IAAI,OAAO,CAAE,OAAO,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;oBAChE,IAAG,OAAO,KAAK,MAAM,EAAE;wBACrB,SAAS,CAAC,QAAQ,GAAG,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;qBAC1D;oBACD,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;oBAChC,WAAW,GAAG,SAAS,CAAC;iBACzB;gBACD,QAAQ,GAAG,EAAE,CAAC;gBACd,CAAC,GAAG,UAAU,CAAC;aAChB;SACF;aAAK;YACJ,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;SACxB;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG;IACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAChB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACf,IAAI,CAAC,QAAQ,GAAG,UAAS,KAAK;QAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE;YAE5C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACvC;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACrC;KACF,CAAC;AACJ,CAAC;AAED,SAAS,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM;IAC/C,IAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAC7C,IAAG,YAAY,KAAK,CAAC,CAAC,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAA;KACxB;SAAK;QACJ,OAAO,YAAY,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;KACtC;AACH,CAAC;AAED,SAAS,QAAQ,CAAC,CAAC;IACjB,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;QACd,OAAO,CAAC,CAAC;KACV;SAAM;QACL,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAED,SAAS,eAAe,CAAC,OAAO,EAAE,GAAG,EAAE,OAAiB;IACtD,IAAI,GAAG,EAAE;QACP,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;SAClB;QACD,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAC9C,GAAG,GAAG,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;KAC/C;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAGD,SAAS,UAAU,CAAC,GAAG,EAAE,WAAW;IAClC,IAAI,WAAW,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC1C,IAAI,MAAM,SAAA,CAAC;QACX,IAAI,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YACrB,MAAM,GAAG,GAAG,KAAK,MAAM,GAAG,IAAI,GAAG,GAAG,KAAK,OAAO,GAAG,KAAK,GAAG,GAAG,CAAC;SAChE;aAAM;YACL,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAE5B,MAAM,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;aAC5B;iBAAM,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBAClC,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;gBACzB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aACjC;iBAAM;gBACL,MAAM,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;aAC5B;SACF;QACD,OAAO,MAAM,CAAC;KACf;SAAM;QACL,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YAChB,OAAO,GAAG,CAAC;SACZ;aAAM;YACL,OAAO,EAAE,CAAC;SACX;KACF;AACH,CAAC;AAGD,SAAS,yBAAyB,CAAC,IAAI,EAAE,CAAC;IACxC,IAAI,YAAY,CAAC;IACjB,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QAChD,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,YAAY,EAAE;YACd,IAAI,EAAE,KAAK,YAAY;gBAAE,YAAY,GAAG,EAAE,CAAC;SAC9C;aAAM,IAAI,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,EAAE;YACjC,YAAY,GAAG,EAAE,CAAC;SACrB;aAAM,IAAI,EAAE,KAAK,GAAG,EAAE;YACnB,OAAO;gBACL,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,KAAK;aACb,CAAA;SACJ;aAAM,IAAI,EAAE,KAAK,IAAI,EAAE;YACtB,EAAE,GAAG,GAAG,CAAA;SACT;QACD,MAAM,IAAI,EAAE,CAAC;KACd;AACH,CAAC;AAGD,SAAS,kBAAkB,CAAC,OAAO,EAAE,OAAiB;IACpD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAEzC,IAAM,SAAS,GAAG,IAAI,MAAM,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC;QAC3E,IAAM,OAAO,GAAG,aAAa,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAClD,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;QAC3B,IAAI,GAAG,KAAK,CAAC,EAAE;YAAE,OAAO;SAAE;QAC1B,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5B,IAAM,QAAQ,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YAC1D,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACnB,IAAM,UAAU,GAAG,IAAI,CAAC;gBACxB,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;oBAC/B,IAAI,OAAO,CAAC,UAAU,EAAE;wBACtB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;qBACtC;oBACD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;oBACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,GAAG,UAAU,CACvC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACb,OAAO,CAAC,mBAAmB,CAC5B,CAAC;iBACH;qBAAM,IAAI,OAAO,CAAC,sBAAsB,EAAE;oBACzC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC;iBACrC;aACF;SACF;QACD,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAGD,SAAS,aAAa,CAAC,MAAM,EAAE,KAAK;IAClC,IAAM,OAAO,GAAG,EAAE,CAAC;IACnB,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,OAAO,KAAK,EAAE;QACZ,IAAM,UAAU,GAAG,EAAE,CAAC;QACtB,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;QACzB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,EAAE,KAAK,EAAE,EAAE;YACxC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/B;QACD,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzB,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC5B;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,gBAAgB,CAAC,OAAO,EAAE,OAAiB;IAClD,IAAI,OAAO,CAAC,eAAe,EAAE;QAC3B,IAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;QACpD,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;YACvB,OAAO,EAAE,CAAC;SACX;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;SAC5B;KACF;IACD,OAAO,OAAO,CAAC;AACjB;;;;"}